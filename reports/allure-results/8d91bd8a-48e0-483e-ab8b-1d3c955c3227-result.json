{"name": "test_valid_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/login\">...</a> is not clickable at point (804, 40). Other element would receive the click: <div class=\"fc-dialog-overlay\"></div>\n  (Session info: chrome=136.0.7103.114)\nStacktrace:\n\tGetHandleVerifier [0x00007FF74AA3CF65+75717]\n\tGetHandleVerifier [0x00007FF74AA3CFC0+75808]\n\t(No symbol) [0x00007FF74A808F9A]\n\t(No symbol) [0x00007FF74A867439]\n\t(No symbol) [0x00007FF74A864DF2]\n\t(No symbol) [0x00007FF74A861EA1]\n\t(No symbol) [0x00007FF74A860DA1]\n\t(No symbol) [0x00007FF74A852394]\n\t(No symbol) [0x00007FF74A88737A]\n\t(No symbol) [0x00007FF74A851C46]\n\t(No symbol) [0x00007FF74A887590]\n\t(No symbol) [0x00007FF74A8AF39C]\n\t(No symbol) [0x00007FF74A887153]\n\t(No symbol) [0x00007FF74A850421]\n\t(No symbol) [0x00007FF74A8511B3]\n\tGetHandleVerifier [0x00007FF74AD3D74D+3223469]\n\tGetHandleVerifier [0x00007FF74AD37CF2+3200338]\n\tGetHandleVerifier [0x00007FF74AD55B23+3322755]\n\tGetHandleVerifier [0x00007FF74AA56A3A+180890]\n\tGetHandleVerifier [0x00007FF74AA5E13F+211359]\n\tGetHandleVerifier [0x00007FF74AA452B4+109332]\n\tGetHandleVerifier [0x00007FF74AA45462+109762]\n\tGetHandleVerifier [0x00007FF74AA2BA79+4825]\n\tBaseThreadInitThunk [0x00007FFB8425E8D7+23]\n\tRtlUserThreadStart [0x00007FFB8613C5DC+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b9c8b9588209e32afbdf0746bdb29032\")>\n\n    def test_valid_login(driver):\n        driver.get(\"https://automationexercise.com\")\n    \n>       driver.find_element(By.LINK_TEXT, \"Signup / Login\").click()\n\ntests\\test_login.py:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:448: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002659B0E1EB0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...4AA2BA79+4825]\\\\n\\\\tBaseThreadInitThunk [0x00007FFB8425E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFB8613C5DC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/login\">...</a> is not clickable at point (804, 40). Other element would receive the click: <div class=\"fc-dialog-overlay\"></div>\nE         (Session info: chrome=136.0.7103.114)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF74AA3CF65+75717]\nE       \tGetHandleVerifier [0x00007FF74AA3CFC0+75808]\nE       \t(No symbol) [0x00007FF74A808F9A]\nE       \t(No symbol) [0x00007FF74A867439]\nE       \t(No symbol) [0x00007FF74A864DF2]\nE       \t(No symbol) [0x00007FF74A861EA1]\nE       \t(No symbol) [0x00007FF74A860DA1]\nE       \t(No symbol) [0x00007FF74A852394]\nE       \t(No symbol) [0x00007FF74A88737A]\nE       \t(No symbol) [0x00007FF74A851C46]\nE       \t(No symbol) [0x00007FF74A887590]\nE       \t(No symbol) [0x00007FF74A8AF39C]\nE       \t(No symbol) [0x00007FF74A887153]\nE       \t(No symbol) [0x00007FF74A850421]\nE       \t(No symbol) [0x00007FF74A8511B3]\nE       \tGetHandleVerifier [0x00007FF74AD3D74D+3223469]\nE       \tGetHandleVerifier [0x00007FF74AD37CF2+3200338]\nE       \tGetHandleVerifier [0x00007FF74AD55B23+3322755]\nE       \tGetHandleVerifier [0x00007FF74AA56A3A+180890]\nE       \tGetHandleVerifier [0x00007FF74AA5E13F+211359]\nE       \tGetHandleVerifier [0x00007FF74AA452B4+109332]\nE       \tGetHandleVerifier [0x00007FF74AA45462+109762]\nE       \tGetHandleVerifier [0x00007FF74AA2BA79+4825]\nE       \tBaseThreadInitThunk [0x00007FFB8425E8D7+23]\nE       \tRtlUserThreadStart [0x00007FFB8613C5DC+44]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "start": 1747347202879, "stop": 1747347206196, "uuid": "70e9b7e1-0efa-455b-828e-5b878d1e90dc", "historyId": "ab68c09e23714aa68c720c2ca07c0ecf", "testCaseId": "ab68c09e23714aa68c720c2ca07c0ecf", "fullName": "tests.test_login#test_valid_login", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "Ogoo"}, {"name": "thread", "value": "18324-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}